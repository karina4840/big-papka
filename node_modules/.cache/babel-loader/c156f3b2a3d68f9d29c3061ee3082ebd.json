{"ast":null,"code":"var _jsxFileName = \"/Users/karina/Main/Study/Web Dev/TEST/weather-app/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport Header from \"./components/Header\";\nimport Footer from \"./components/Footer\";\nimport Loader from \"./components/Loader\";\nimport Warning from \"./components/Warning\";\nimport WeatherAndForecast from \"./components/WeatherAndForecast\";\nimport getCoordinatesOfAddress from \"./api/forwardGeocoding\";\nimport getWeatherAndForecast from \"./api/weatherAndForecast\";\nimport \"./styles/App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  // задаем изначальные состояния для будущих данных\n  const [address, setAddress] = useState(\"\");\n  const [coordinates, setCoordinates] = useState({});\n  const [weatherAndForecastInfo, setWeatherAndForecastInfo] = useState({});\n  const [locationInfo, setLocationInfo] = useState({});\n  const [contentState, setContentState] = useState(\"none\"); // сохраняем данные из ввода\n\n  function searchCity(target) {\n    setAddress(target);\n  } // предупреждение об ошибке\n\n\n  function showWarning() {\n    setContentState(\"warning\");\n    setTimeout(() => setContentState(\"blank\"), 5000);\n  } // задаем адрес \n\n\n  useEffect(() => {\n    if (address === \"\") return;\n    setContentState(\"loading\"); // экран загрузки во время получения данных\n    // получаем адрес для работы \n\n    getCoordinatesOfAddress(address).then(res => {\n      if (res.data.length === 0) {\n        showWarning();\n        return;\n      } // задаем координаты в стейт\n\n\n      setCoordinates(res.data.lat, res.data); // задаем инфо о городе\n\n      setLocationInfo({\n        city: res.data.name,\n        country: res.data.country\n      });\n    }).catch(error => showWarning());\n  }, [address]); // задаем координаты\n\n  useEffect(() => {\n    if (Object.keys(coordinates).length === 0) return; // получаем координаты для работы \n\n    getWeatherAndForecast(coordinates).then(res => {\n      setWeatherAndForecastInfo(res.data);\n      setContentState(\"weatherAndForecast\");\n    }).catch(error => showWarning());\n  }, [coordinates]); // создаем js обьект с состояниями для загрузки, ошибки, и отображения инфо\n\n  const Main = {\n    none: () => null,\n    loading: () => /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 24\n    }, this),\n    warning: () => /*#__PURE__*/_jsxDEV(Warning, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 24\n    }, this),\n    weatherAndForecast: () => /*#__PURE__*/_jsxDEV(WeatherAndForecast, {\n      weatherInfo: weatherAndForecastInfo,\n      location: locationInfo\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }, this)\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App__container\",\n      children: [/*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Header, {\n          searchCity: searchCity\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 17\n        }, this), Main[contentState]()]\n      }, void 0, true), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 9\n  }, this);\n}\n\n_s(App, \"ZUSyuB7lAxS750Ld06HikOKDQt0=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/karina/Main/Study/Web Dev/TEST/weather-app/src/App.js"],"names":["React","useState","useEffect","Header","Footer","Loader","Warning","WeatherAndForecast","getCoordinatesOfAddress","getWeatherAndForecast","App","address","setAddress","coordinates","setCoordinates","weatherAndForecastInfo","setWeatherAndForecastInfo","locationInfo","setLocationInfo","contentState","setContentState","searchCity","target","showWarning","setTimeout","then","res","data","length","lat","city","name","country","catch","error","Object","keys","Main","none","loading","warning","weatherAndForecast"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from \"react\";\n\nimport Header from \"./components/Header\";\nimport Footer from \"./components/Footer\";\nimport Loader from \"./components/Loader\";\nimport Warning from \"./components/Warning\";\nimport WeatherAndForecast from \"./components/WeatherAndForecast\";\n\nimport getCoordinatesOfAddress from \"./api/forwardGeocoding\";\nimport getWeatherAndForecast from \"./api/weatherAndForecast\";\n\nimport \"./styles/App.css\";\n\nfunction App() {\n\n  // задаем изначальные состояния для будущих данных\n  const [address, setAddress] = useState(\"\");\n  const [coordinates, setCoordinates] = useState({});\n  const [weatherAndForecastInfo, setWeatherAndForecastInfo] = useState({});\n  const [locationInfo, setLocationInfo] = useState({});\n  const [contentState, setContentState] = useState(\"none\");\n\n  // сохраняем данные из ввода\n  function searchCity(target) {\n    setAddress(target);\n  }\n\n  // предупреждение об ошибке\n  function showWarning() {\n    setContentState(\"warning\");\n    setTimeout(() => setContentState(\"blank\"), 5000);\n  }\n// задаем адрес \n    useEffect(() => {\n      if (address === \"\")\n        return;\n      setContentState(\"loading\");   // экран загрузки во время получения данных\n\n      // получаем адрес для работы \n      getCoordinatesOfAddress(address).then((res) => {\n        if (res.data.length === 0) {\n          showWarning();\n          return;\n        }\n        // задаем координаты в стейт\n        setCoordinates(res.data.lat, res.data);\n        // задаем инфо о городе\n        setLocationInfo({\n          city: res.data.name,\n          country: res.data.country\n        });\n      }).catch((error) => showWarning());\n    }, [address]);\n\n// задаем координаты\n    useEffect(() => {\n        if (Object.keys(coordinates).length === 0) \n            return;\n        // получаем координаты для работы \n        getWeatherAndForecast(coordinates).then((res) => {\n            setWeatherAndForecastInfo(res.data);\n            setContentState(\"weatherAndForecast\");\n        }).catch((error) => showWarning());\n    }, [coordinates]);\n\n    \n// создаем js обьект с состояниями для загрузки, ошибки, и отображения инфо\n    const Main = {\n        none: () => null,\n        loading: () => <Loader/>,\n        warning: () => <Warning/>,\n        weatherAndForecast: () => (\n        <WeatherAndForecast\n            weatherInfo={weatherAndForecastInfo}\n            location={locationInfo}/>)\n    };\n\n    return (\n        <div className=\"App\">\n            <div className=\"App__container\">\n                <> \n                <Header searchCity={searchCity}/> \n                {Main[contentState]()}\n            </>\n            <Footer/>\n        </div>\n    </div>\n    );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}