{"ast":null,"code":"var _jsxFileName = \"/Users/karina/Main/Study/Web Dev/TEST/weather-app/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport Header from \"./components/Header\";\nimport WeatherAndForecast from \"./components/WeatherAndForecast\";\nimport Footer from \"./components/Footer\";\nimport Loader from \"./components/Loader\";\nimport Warning from \"./components/Warning\"; // import getAddressOfCoordinates from \"./api/reverseGeocoding\";\n// import getCoordinatesOfAddress from \"./api/forwardGeocoding\";\n// import getWeatherAndForecast from \"./api/weatherAndForecast\";\n\nimport \"./styles/App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  // const [address, setAddress] = useState(\"\");\n  const [coordinates, setCoordinates] = useState({});\n  const [weatherAndForecastInfo, setWeatherAndForecastInfo] = useState({});\n  const [locationInfo, setLocationInfo] = useState({});\n  const [contentState, setContentState] = useState(\"blank\");\n\n  function searchCity(target) {\n    setAddress(target);\n  }\n\n  function showWarning() {\n    setContentState(\"warning\");\n    setTimeout(() => setContentState(\"blank\"), 3000);\n  }\n\n  useEffect(() => {\n    function makeRequest(position) {\n      setContentState(\"loading\");\n      getAddressOfCoordinates(position.coords.latitude, position.coords.longitude).then(res => {\n        setLocationInfo({\n          city: res.data.results[0].components.city_district,\n          town: res.data.results[0].components.town,\n          state: res.data.results[0].components.state_code,\n          country: res.data.results[0].components.country_code\n        });\n      }).then(() => setCoordinates({\n        lat: position.coords.latitude,\n        lng: position.coords.longitude\n      })).catch(error => showWarning());\n    }\n\n    function catchError(err) {\n      alert(\"ERROR(\" + err.code + \"): \" + err.message);\n    }\n\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(makeRequest, catchError);\n    } else {\n      alert(\"Geolocation is not supported by this browser.\");\n    }\n  }, []); // useEffect(() => {\n  //   if (address === \"\") return;\n  //   setContentState(\"loading\");\n  //   getCoordinatesOfAddress(address)\n  //     .then((res) => {\n  //       if (\n  //         res.data.results.length === 0 ||\n  //         (res.data.results[0].components.city === undefined &&\n  //           res.data.results[0].components.town === undefined)\n  //       ) {\n  //         showWarning();\n  //         return;\n  //       }\n  //       setCoordinates(res.data.results[0].geometry);\n  //       setLocationInfo({\n  //         city: res.data.results[0].components.city,\n  //         town: res.data.results[0].components.town,\n  //         state: res.data.results[0].components.state_code,\n  //         country: res.data.results[0].components.country_code\n  //       });\n  //     })\n  //     .catch((error) => showWarning());\n  // }, [address]);\n\n  useEffect(() => {\n    if (Object.keys(coordinates).length === 0) return;\n    getWeatherAndForecast(coordinates).then(res => {\n      setWeatherAndForecastInfo(res.data);\n      setContentState(\"weatherAndForecast\");\n    }).catch(error => showWarning());\n  }, [coordinates]);\n  const Main = {\n    blank: () => null,\n    loading: () => /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 20\n    }, this),\n    warning: () => /*#__PURE__*/_jsxDEV(Warning, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 20\n    }, this),\n    weatherAndForecast: () => /*#__PURE__*/_jsxDEV(WeatherAndForecast, {\n      weatherInfo: weatherAndForecastInfo,\n      location: locationInfo\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this)\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App__container\",\n      children: [/*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Header, {\n          searchCity: searchCity\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 11\n        }, this), Main[contentState]()]\n      }, void 0, true), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 116,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"QeOi9MeRkmnoZUoP69B1L3XufpA=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/karina/Main/Study/Web Dev/TEST/weather-app/src/App.js"],"names":["React","useState","useEffect","Header","WeatherAndForecast","Footer","Loader","Warning","App","coordinates","setCoordinates","weatherAndForecastInfo","setWeatherAndForecastInfo","locationInfo","setLocationInfo","contentState","setContentState","searchCity","target","setAddress","showWarning","setTimeout","makeRequest","position","getAddressOfCoordinates","coords","latitude","longitude","then","res","city","data","results","components","city_district","town","state","state_code","country","country_code","lat","lng","catch","error","catchError","err","alert","code","message","navigator","geolocation","getCurrentPosition","Object","keys","length","getWeatherAndForecast","Main","blank","loading","warning","weatherAndForecast"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nimport Header from \"./components/Header\";\nimport WeatherAndForecast from \"./components/WeatherAndForecast\";\nimport Footer from \"./components/Footer\";\nimport Loader from \"./components/Loader\";\nimport Warning from \"./components/Warning\";\n\n// import getAddressOfCoordinates from \"./api/reverseGeocoding\";\n// import getCoordinatesOfAddress from \"./api/forwardGeocoding\";\n// import getWeatherAndForecast from \"./api/weatherAndForecast\";\n\nimport \"./styles/App.css\";\n\nfunction App() {\n  // const [address, setAddress] = useState(\"\");\n  const [coordinates, setCoordinates] = useState({});\n  const [weatherAndForecastInfo, setWeatherAndForecastInfo] = useState({});\n  const [locationInfo, setLocationInfo] = useState({});\n  const [contentState, setContentState] = useState(\"blank\");\n\n  function searchCity(target) {\n    setAddress(target);\n  }\n\n  function showWarning() {\n    setContentState(\"warning\");\n    setTimeout(() => setContentState(\"blank\"), 3000);\n  }\n\n  useEffect(() => {\n    function makeRequest(position) {\n      setContentState(\"loading\");\n      getAddressOfCoordinates(\n        position.coords.latitude,\n        position.coords.longitude\n      )\n        .then((res) => {\n          setLocationInfo({\n            city: res.data.results[0].components.city_district,\n            town: res.data.results[0].components.town,\n            state: res.data.results[0].components.state_code,\n            country: res.data.results[0].components.country_code\n          });\n        })\n        .then(() =>\n          setCoordinates({\n            lat: position.coords.latitude,\n            lng: position.coords.longitude\n          })\n        )\n        .catch((error) => showWarning());\n    }\n\n    function catchError(err) {\n      alert(\"ERROR(\" + err.code + \"): \" + err.message);\n    }\n\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(makeRequest, catchError);\n    } else {\n      alert(\"Geolocation is not supported by this browser.\");\n    }\n  }, []);\n\n  // useEffect(() => {\n  //   if (address === \"\") return;\n\n  //   setContentState(\"loading\");\n  //   getCoordinatesOfAddress(address)\n  //     .then((res) => {\n  //       if (\n  //         res.data.results.length === 0 ||\n  //         (res.data.results[0].components.city === undefined &&\n  //           res.data.results[0].components.town === undefined)\n  //       ) {\n  //         showWarning();\n  //         return;\n  //       }\n\n  //       setCoordinates(res.data.results[0].geometry);\n  //       setLocationInfo({\n  //         city: res.data.results[0].components.city,\n  //         town: res.data.results[0].components.town,\n  //         state: res.data.results[0].components.state_code,\n  //         country: res.data.results[0].components.country_code\n  //       });\n  //     })\n  //     .catch((error) => showWarning());\n  // }, [address]);\n\n  useEffect(() => {\n    if (Object.keys(coordinates).length === 0) return;\n\n    getWeatherAndForecast(coordinates)\n      .then((res) => {\n        setWeatherAndForecastInfo(res.data);\n        setContentState(\"weatherAndForecast\");\n      })\n      .catch((error) => showWarning());\n  }, [coordinates]);\n\n  const Main = {\n    blank: () => null,\n    loading: () => <Loader />,\n    warning: () => <Warning />,\n    weatherAndForecast: () => (\n      <WeatherAndForecast\n        weatherInfo={weatherAndForecastInfo}\n        location={locationInfo}\n      />\n    )\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__container\">\n        <>\n          <Header searchCity={searchCity} />\n          {Main[contentState]()}\n        </>\n        <Footer />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}